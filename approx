import os
import time

def fptas_knapsack(items, max_weight, epsilon):
    start_time = time.time()  # Start timing the knapsack function

    max_value = max(item['value'] for item in items)
    n = len(items)
    K = max_value * epsilon / n
    scaled_items = [{'value': int(item['value'] / K), 'weight': item['weight']} for item in items]
    dp = [0] * (max_weight + 1)
    for item in scaled_items:
        for weight in range(max_weight, item['weight'] - 1, -1):
            dp[weight] = max(dp[weight], dp[weight - item['weight']] + item['value'])
    approximate_total_value = int(dp[max_weight] * K)

    end_time = time.time()  # End timing after calculation
    return approximate_total_value, end_time - start_time  # Return both result and time taken

def parse_and_solve_knapsack(filepath, epsilon):
    with open(filepath, 'r') as file:
        lines = file.readlines()
    n_items, max_weight = map(float, lines[0].strip().split())
    n_items, max_weight = int(n_items), int(max_weight)
    items = []
    for line in lines[1:n_items + 1]:
        try:
            value, weight = map(float, line.strip().split())
            items.append({'value': value, 'weight': int(weight)})
        except ValueError as e:
            print(f"Skipping line in {filepath} due to error: {e}")
            continue
    return fptas_knapsack(items, max_weight, epsilon)

epsilon = 0.1

file_paths = [os.path.join('large', f'large_{i}') for i in range(1, 22)]

results = []
for file_path in file_paths:
    solution_file_path = os.path.join('large_solution', os.path.basename(file_path))
    if not os.path.exists(file_path):
        print(f"Data file missing: {file_path}")
        continue
    if not os.path.exists(solution_file_path):
        print(f"Solution file missing: {solution_file_path}")
        continue
    try:
        start_time = time.time()  # Start timing the entire processing for one file
        approx_total_value, knapsack_time = parse_and_solve_knapsack(file_path, epsilon)
        with open(solution_file_path, 'r') as sol_file:
            official_total_value = int(sol_file.read().strip())
        approximation_ratio = approx_total_value / official_total_value if official_total_value != 0 else float('inf')
        end_time = time.time()  # End timing the entire processing
        total_time = end_time - start_time  # Total processing time for one file
        results.append({
            'File': file_path,
            'Approximate Total Value': approx_total_value,
            'Official Total Value': official_total_value,
            'Approximation Ratio': approximation_ratio,
            'Knapsack Function Time': knapsack_time,
            'Total Processing Time': total_time
        })
    except Exception as e:
        print(f"Error processing file {file_path}: {str(e)}")

for result in results:
    print(result)
